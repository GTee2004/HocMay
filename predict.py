import tkinter as tk
from tkinter import messagebox
import pickle
import numpy as np

# Load model
with open("student_pass_model.pkl", "rb") as f:
    model = pickle.load(f)

# Danh s√°ch c√°c ƒë·∫∑c tr∆∞ng
features = [
    'school', 'sex', 'age', 'address', 'famsize', 'Pstatus', 'Medu', 'Fedu',
    'Mjob', 'Fjob', 'reason', 'guardian', 'traveltime', 'studytime',
    'failures', 'schoolsup', 'famsup', 'paid', 'activities', 'nursery',
    'higher', 'internet', 'romantic', 'famrel', 'freetime', 'goout',
    'Dalc', 'Walc', 'health', 'absences', 'G1', 'G2'
]

# M√¥ t·∫£ v√† g·ª£i √Ω nh·∫≠p li·ªáu b·∫±ng ti·∫øng Vi·ªát
feature_labels = {
    'school': "Tr∆∞·ªùng (GP/MS)",
    'sex': "Gi·ªõi t√≠nh (M/F)",
    'age': "Tu·ªïi (15-22)",
    'address': "ƒê·ªãa ch·ªâ (U=th√†nh ph·ªë, R=n√¥ng th√¥n)",
    'famsize': "C·ª° gia ƒë√¨nh (GT3/LE3)",
    'Pstatus': "T√¨nh tr·∫°ng cha m·∫π (T=c√πng s·ªëng, A=kh√¥ng)",
    'Medu': "Tr√¨nh ƒë·ªô h·ªçc v·∫•n m·∫π (0-4)",
    'Fedu': "Tr√¨nh ƒë·ªô h·ªçc v·∫•n cha (0-4)",
    'Mjob': "Ngh·ªÅ m·∫π (teacher/health/services/at_home/other)",
    'Fjob': "Ngh·ªÅ cha (teacher/health/services/at_home/other)",
    'reason': "L√Ω do ch·ªçn tr∆∞·ªùng (home/reputation/course/other)",
    'guardian': "Ng∆∞·ªùi gi√°m h·ªô (mother/father/other)",
    'traveltime': "Th·ªùi gian ƒë·∫øn tr∆∞·ªùng (1-4)",
    'studytime': "Th·ªùi gian h·ªçc m·ªói tu·∫ßn (1-4)",
    'failures': "S·ªë m√¥n tr∆∞·ª£t tr∆∞·ªõc ƒë√≥ (0-3)",
    'schoolsup': "H·ªçc th√™m ·ªü tr∆∞·ªùng (yes/no)",
    'famsup': "H·ªçc th√™m gia ƒë√¨nh h·ªó tr·ª£ (yes/no)",
    'paid': "H·ªçc th√™m tr·∫£ ph√≠ (yes/no)",
    'activities': "Tham gia ho·∫°t ƒë·ªông ngo·∫°i kho√° (yes/no)",
    'nursery': "H·ªçc m·∫ßm non (yes/no)",
    'higher': "Mu·ªën h·ªçc ƒë·∫°i h·ªçc (yes/no)",
    'internet': "C√≥ internet ·ªü nh√† (yes/no)",
    'romantic': "ƒêang c√≥ m·ªëi quan h·ªá (yes/no)",
    'famrel': "Quan h·ªá gia ƒë√¨nh (1=R·∫•t t·ªá - 5=R·∫•t t·ªët)",
    'freetime': "Th·ªùi gian r·∫£nh (1-5)",
    'goout': "Th·ªùi gian ƒëi ch∆°i v·ªõi b·∫°n (1-5)",
    'Dalc': "R∆∞·ª£u ng√†y th∆∞·ªùng (1-5)",
    'Walc': "R∆∞·ª£u cu·ªëi tu·∫ßn (1-5)",
    'health': "T√¨nh tr·∫°ng s·ª©c kho·∫ª (1-5)",
    'absences': "S·ªë bu·ªïi ngh·ªâ h·ªçc",
    'G1': "ƒêi·ªÉm k·ª≥ 1 (0-20)",
    'G2': "ƒêi·ªÉm k·ª≥ 2 (0-20)"
}

# M√£ ho√° gi√° tr·ªã nh∆∞ m√¥ h√¨nh
encoding_map = {
    "yes_no": {"yes": 1, "no": 0},
    "binary": {"T": 1, "A": 0, "U": 1, "R": 0, "GT3": 1, "LE3": 0},
    "school": {"GP": 0, "MS": 1},
    "sex": {"F": 0, "M": 1},
    "jobs": {"teacher": 0, "health": 1, "services": 2, "at_home": 3, "other": 4},
    "reason": {"home": 0, "reputation": 1, "course": 2, "other": 3},
    "guardian": {"mother": 0, "father": 1, "other": 2}
}

# H√†m x·ª≠ l√Ω input
def encode_input(values):
    try:
        data = []
        data.append(encoding_map["school"][values["school"]])
        data.append(encoding_map["sex"][values["sex"]])
        data.append(int(values["age"]))
        data.append(encoding_map["binary"][values["address"]])
        data.append(encoding_map["binary"][values["famsize"]])
        data.append(encoding_map["binary"][values["Pstatus"]])
        data.append(int(values["Medu"]))
        data.append(int(values["Fedu"]))
        data.append(encoding_map["jobs"][values["Mjob"]])
        data.append(encoding_map["jobs"][values["Fjob"]])
        data.append(encoding_map["reason"][values["reason"]])
        data.append(encoding_map["guardian"][values["guardian"]])
        data.append(int(values["traveltime"]))
        data.append(int(values["studytime"]))
        data.append(int(values["failures"]))
        data.append(encoding_map["yes_no"][values["schoolsup"]])
        data.append(encoding_map["yes_no"][values["famsup"]])
        data.append(encoding_map["yes_no"][values["paid"]])
        data.append(encoding_map["yes_no"][values["activities"]])
        data.append(encoding_map["yes_no"][values["nursery"]])
        data.append(encoding_map["yes_no"][values["higher"]])
        data.append(encoding_map["yes_no"][values["internet"]])
        data.append(encoding_map["yes_no"][values["romantic"]])
        data.append(int(values["famrel"]))
        data.append(int(values["freetime"]))
        data.append(int(values["goout"]))
        data.append(int(values["Dalc"]))
        data.append(int(values["Walc"]))
        data.append(int(values["health"]))
        data.append(int(values["absences"]))
        data.append(int(values["G1"]))
        data.append(int(values["G2"]))
        return np.array(data).reshape(1, -1)
    except Exception as e:
        messagebox.showerror("L·ªói d·ªØ li·ªáu", f"D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá: {e}")
        return None

# T·∫°o giao di·ªán
root = tk.Tk()
root.title("üéì D·ª± ƒëo√°n k·∫øt qu·∫£ h·ªçc t·∫≠p (ƒê·∫≠u / R·ªõt)")

entries = {}

def predict():
    values = {key: entry.get() for key, entry in entries.items()}
    input_data = encode_input(values)
    if input_data is not None:
        prediction = model.predict(input_data)[0]
        result = "‚úÖ ƒê·∫¨U" if prediction == 1 else "‚ùå R·ªöT"
        messagebox.showinfo("K·∫øt qu·∫£ d·ª± ƒëo√°n", f"K·∫øt qu·∫£ h·ªçc t·∫≠p d·ª± ƒëo√°n: {result}")

# Giao di·ªán: Nh√£n, √¥ nh·∫≠p li·ªáu, v√† ch√∫ th√≠ch
for i, feature in enumerate(features):
    tk.Label(root, text=feature).grid(row=i, column=0, sticky="w", padx=5)
    entry = tk.Entry(root, width=20)
    entry.grid(row=i, column=1)
    entries[feature] = entry
    # G·ª£i √Ω ti·∫øng Vi·ªát
    tk.Label(root, text=feature_labels.get(feature, ""), fg="gray").grid(row=i, column=2, sticky="w", padx=5)

# N√∫t d·ª± ƒëo√°n
tk.Button(root, text="D·ª± ƒëo√°n", command=predict).grid(row=len(features), column=0, columnspan=3, pady=10)

root.mainloop()
